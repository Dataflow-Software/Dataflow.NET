// autogenerated by Dataflow Software implementation of Protocol Buffers to C# compiler

using System;
using Dataflow.Serialization;

namespace Dataflow.Serialization
{
	// package: google.protobuf
	
	public sealed partial class Any : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Any", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new Any(),
				new FieldDescriptor("type_url", 10, 5),
				new FieldDescriptor("value", 18, 6)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional string type_url = 1;
		public string TypeUrl { get { return _type_url; } set { _type_url = value; } }
		// optional bytes value = 2;
		public byte[] Value { get { return _value; } set { _value = value; } }
		
		#region message fields
		
		private string _type_url;
		public void ClearTypeUrl() { _type_url = null; }
		public bool HasTypeUrl { get { return _type_url != null; } }
		private byte[] _value;
		public void ClearValue() { _value = null; }
		public bool HasValue { get { return _value != null; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Any(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_type_url = null;
			_value = null;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Any;
			if(test==null) return false;
			if(_type_url != test._type_url) return false;
			if(!Pbs.EqualBytes(_value,test._value)) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: TypeUrl = dr_.AsString(); break;
				case 1: Value = dr_.AsBytes(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasTypeUrl) _gss_+= 1 + Pbs.str(_type_url);
			if(HasValue) _gss_+= 1 + Pbs.bts(_value);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasTypeUrl) wr_.AsString(fs_[0], _type_url);
			if(HasValue) wr_.AsBytes(fs_[1], _value);
		}

        #endregion
    }

    public sealed partial class Struct : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Struct", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new Struct(),
				new FieldDescriptor("fields", 10, 82, _map_ds_(5, 15, Value.Descriptor))
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// map map fields = 1;
		public KeyValueMap<string,Value> Fields { get { var map = new KeyValueMap<string,Value>(); foreach(var kv in _fields.Items) map.Add(kv.sk, (Value)kv.ov); return map; } }
		
		#region message fields
		
		private static readonly MessageDescriptor _fields_desc = Descriptor.Fields[0].MessageType;
		private Repeated<MapEntry> _fields;
		public Struct AddFields(string key, Value value) { var kv = GetMapEntry(_fields.Items, key, _fields_desc); kv.ov = value; _fields.Add(kv); return this; }
		public Value GetFields(string key) { return (Value)GetMapEntry(_fields.Items, key, null).ov; }
		public int FieldsCount { get { return _fields.Count; } }
		public void ClearFields() { _fields.Clear(); }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Struct(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_fields.Clear();
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Struct;
			if(test==null) return false;
			if(_fields.Count != test._fields.Count) return false; for(var i = 0; i < _fields.Count; i++) if(!_fields[i].Equals(test._fields[i])) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			var _kv0_= new MapEntry(_fields_desc); dr_.AsMessage(_kv0_, ds_); _fields.Add(_kv0_);
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if (_fields.Count > 0) { _gss_+= _fields.Count; foreach(var it in _fields.Items) _gss_+= Pbs.msg(it); }
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(_fields.Count > 0) wr_.AsRepeated(fs_[0], _fields.Items);
		}
		
		#endregion
	}
	
	public enum NullValue
	{
		NULL_VALUE = 0
	}
	
	public static partial class EnumDescriptors
	{
		public static readonly EnumDescriptor NullValue = new EnumDescriptor( "NullValue",
			new EnumFieldDescriptor("NULL_VALUE", 0)
		);
	}
	
	public sealed partial class Value : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Value", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new Value(),
				new FieldDescriptor("Null", 8, 16, EnumDescriptors.NullValue),
				new FieldDescriptor("Number", 17, 12),
				new FieldDescriptor("String", 26, 5),
				new FieldDescriptor("Bool", 32, 13),
				new FieldDescriptor("Members", 42, 15, Struct.Descriptor),
				new FieldDescriptor("Elements", 50, 15, ListValue.Descriptor),
				new FieldDescriptor("Bigint", 64, 1026)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional NullValue Null = 1;
		public NullValue Null { get { return _kind_id_== 1?_null : NullValue.NULL_VALUE; } set { _kind_id_ = 1; _kind_obj_= null; _null = value; } }
		// optional double Number = 2;
		public double Number { get { return _kind_id_== 2?_number : 0; } set { _kind_id_ = 2; _kind_obj_= null; _number = value; } }
		// optional string String = 3;
		public string String { get { return _kind_id_== 3?_string : null; } set { _kind_id_ = 3; _kind_val_= 0; _kind_obj_= value; } }
		// optional bool Bool = 4;
		public bool Bool { get { return _kind_id_== 4?_bool : false; } set { _kind_id_ = 4; _kind_obj_= null; _bool = value; } }
		// optional Struct Members = 5;
		public Struct Members { get { return _kind_id_== 5?_members : null; } set { _kind_id_ = 5; _kind_val_= 0; _kind_obj_= value; } }
		// optional ListValue Elements = 6;
		public ListValue Elements { get { return _kind_id_== 6?_elements : null; } set { _kind_id_ = 6; _kind_val_= 0; _kind_obj_= value; } }
		// optional sint64 Bigint = 8;
		public long Bigint { get { return _kind_id_== 8?_bigint : 0; } set { _kind_id_ = 8; _kind_obj_= null; _bigint = value; } }
		
		#region message fields
		
		public enum KindCase { Kind_NOT_SET = 0, Null = 1, Number = 2, String = 3, Bool = 4, Members = 5, Elements = 6, Bigint = 8 }
		private int _kind_id_;
		private long _kind_val_;
		private object _kind_obj_;
		public KindCase OneOfKind { get { return (KindCase)_kind_id_; } } 
		public void ClearKind() { _kind_val_= 0; _kind_obj_= null; _kind_id_= 0; } 
		
		private NullValue _null { get { return (NullValue)_kind_val_; } set { _kind_val_= (long)value; } }
		public bool HasNull { get { return _kind_id_== 1; } }
		public void ClearNull() { if (_kind_id_== 1) _kind_id_= 0; }
		private double _number { get { return Pbs.SetDoubleBits(_kind_val_); } set { _kind_val_ = Pbs.GetDoubleBits(value); } }
		public bool HasNumber { get { return _kind_id_== 2; } }
		public void ClearNumber() { if (_kind_id_== 2) _kind_id_= 0; }
		private string _string { get { return (string)_kind_obj_; } set { _kind_obj_= value; }  }
		public bool HasString { get { return _kind_id_== 3; } }
		public void ClearString() { if (_kind_id_== 3) _kind_id_= 0; }
		private bool _bool { get { return _kind_val_!=0; } set { _kind_val_ = value?1:0; } }
		public bool HasBool { get { return _kind_id_== 4; } }
		public void ClearBool() { if (_kind_id_== 4) _kind_id_= 0; }
		private Struct _members { get { return (Struct)_kind_obj_; } set { _kind_obj_= value; }  }
		public bool HasMembers { get { return _kind_id_== 5; } }
		public void ClearMembers() { if (_kind_id_== 5) _kind_id_= 0; }
		private ListValue _elements { get { return (ListValue)_kind_obj_; } set { _kind_obj_= value; }  }
		public bool HasElements { get { return _kind_id_== 6; } }
		public void ClearElements() { if (_kind_id_== 6) _kind_id_= 0; }
		private long _bigint { get { return _kind_val_; } set { _kind_val_= value; } }
		public bool HasBigint { get { return _kind_id_== 8; } }
		public void ClearBigint() { if (_kind_id_== 8) _kind_id_= 0; }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Value(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_kind_id_ = 0; _kind_val_= 0;  _kind_obj_= null; 
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Value;
			if(test==null) return false;
			if (OneOfKind != test.OneOfKind) return false;
			switch (_kind_id_) 
			{
				case 0: break;
				case 1: if(_null != test._null) return false; break; 
				case 2: if(_number != test._number) return false; break; 
				case 3: if(_string != test._string) return false; break; 
				case 4: if(_bool != test._bool) return false; break; 
				case 5: if(!_members.Equals(test._members)) return false; break; 
				case 6: if(!_elements.Equals(test._elements)) return false; break; 
				case 8: if(_bigint != test._bigint) return false; break; 
			}
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Null = (NullValue)dr_.AsEnum(EnumDescriptors.NullValue); break;
				case 1: Number = dr_.AsDouble(); break;
				case 2: String = dr_.AsString(); break;
				case 3: Bool = dr_.AsBool(); break;
				case 4: dr_.AsMessage(_members??(Members = new Struct()), ds_); break;
				case 5: dr_.AsMessage(_elements??(Elements = new ListValue()), ds_); break;
				case 6: Bigint = dr_.AsSi64(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			switch (_kind_id_) 
			{
				case 0: break;
				case 1: _gss_+= 2; break; 
				case 2: _gss_+= 9; break; 
				case 3: _gss_+= 1 + Pbs.str(_string); break; 
				case 4: _gss_+= 2; break; 
				case 5: _gss_+= 1 + Pbs.msg(_members); break; 
				case 6: _gss_+= 1 + Pbs.msg(_elements); break; 
				case 8: _gss_+= 1 + Pbs.si64(_bigint); break; 
			}
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			switch (_kind_id_) 
			{
				case 0: break;
				case 1: wr_.AsEnum(fs_[0], (int)_null); break; 
				case 2: wr_.AsDouble(fs_[1], _number); break; 
				case 3: wr_.AsString(fs_[2], _string); break; 
				case 4: wr_.AsBool(fs_[3], _bool); break; 
				case 5: wr_.AsMessage(fs_[4], _members); break; 
				case 6: wr_.AsMessage(fs_[5], _elements); break; 
				case 8: wr_.AsSi64(fs_[6], _bigint); break; 
			}
		}
		
		#endregion
	}
	
	public sealed partial class ListValue : MessageArray<Value>
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("ListValue", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new ListValue(),
				new FieldDescriptor("Values", 10, 2127, Value.Descriptor)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// repeated Value Values = 1;
		public Value[] Values { get { return _msgs.Items; } set { _msgs.Items = value; } }
		
		#region message fields
		
		public Value AddValues(Value i) { return _msgs.Add(i); }
		public Value GetValues(int i) { return _msgs[i]; }
		public int ValuesCount { get { return _msgs.Count; } }
		public void ClearValues() { _msgs.Clear(); }
		
		#endregion
		
		#region message methods
		
		public ListValue() {}
		public ListValue( Value[] value ) { Values = value; }
		public override Message New() { return new ListValue(); }
		
		#endregion
	}
	
	public sealed partial class Timestamp : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Timestamp", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new Timestamp(),
				new FieldDescriptor("seconds", 8, 2),
				new FieldDescriptor("nanos", 16, 1)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional int64 seconds = 1;
		public long Seconds { get { return _seconds; } set { _b0|=0x01; _seconds = value; } }
		// optional int32 nanos = 2;
		public int Nanos { get { return _nanos; } set { _b0|=0x02; _nanos = value; } }
		
		#region message fields
		
		private long _seconds;
		public void ClearSeconds() { _b0&=~0x01; _seconds = 0; }
		public bool HasSeconds { get { return (_b0&0x01) != 0; } }
		private int _nanos;
		public void ClearNanos() { _b0&=~0x02; _nanos = 0; }
		public bool HasNanos { get { return (_b0&0x02) != 0; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Timestamp(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_seconds = 0;
			_nanos = 0;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Timestamp;
			if(test==null) return false;
			if(_seconds != test._seconds) return false;
			if(_nanos != test._nanos) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Seconds = dr_.AsLong(); break;
				case 1: Nanos = dr_.AsInt(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasSeconds) _gss_+= 1 + Pbs.i64(_seconds);
			if(HasNanos) _gss_+= 1 + Pbs.i32(_nanos);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasSeconds) wr_.AsLong(fs_[0], _seconds);
			if(HasNanos) wr_.AsInt(fs_[1], _nanos);
		}
		
		#endregion
	}
	
	public sealed partial class Duration : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Duration", Pbs.iGoogleType);
			_init_ds_(_boot_ds_, new Duration(),
				new FieldDescriptor("seconds", 8, 2),
				new FieldDescriptor("nanos", 16, 1)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional int64 seconds = 1;
		public long Seconds { get { return _seconds; } set { _b0|=0x01; _seconds = value; } }
		// optional int32 nanos = 2;
		public int Nanos { get { return _nanos; } set { _b0|=0x02; _nanos = value; } }
		
		#region message fields
		
		private long _seconds;
		public void ClearSeconds() { _b0&=~0x01; _seconds = 0; }
		public bool HasSeconds { get { return (_b0&0x01) != 0; } }
		private int _nanos;
		public void ClearNanos() { _b0&=~0x02; _nanos = 0; }
		public bool HasNanos { get { return (_b0&0x02) != 0; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Duration(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_seconds = 0;
			_nanos = 0;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Duration;
			if(test==null) return false;
			if(_seconds != test._seconds) return false;
			if(_nanos != test._nanos) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Seconds = dr_.AsLong(); break;
				case 1: Nanos = dr_.AsInt(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasSeconds) _gss_+= 1 + Pbs.i64(_seconds);
			if(HasNanos) _gss_+= 1 + Pbs.i32(_nanos);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasSeconds) wr_.AsLong(fs_[0], _seconds);
			if(HasNanos) wr_.AsInt(fs_[1], _nanos);
		}
		
		#endregion
	}
}