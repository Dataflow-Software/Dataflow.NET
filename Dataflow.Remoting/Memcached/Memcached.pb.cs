// autogenerated by Dataflow Software implementation of Protocol Buffers to C# compiler

using System;
using Dataflow.Serialization;

namespace Dataflow.Memcached
{
	// package: Dataflow.Memcached
	
	public sealed partial class CachedRequest : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("CachedRequest");
			_init_ds_(_boot_ds_, new CachedRequest(),
				new FieldDescriptor("Opcode", 8, 1),
				new FieldDescriptor("Data", 18, 6),
				new FieldDescriptor("Key", 26, 6),
				new FieldDescriptor("Expires", 32, 1),
				new FieldDescriptor("Flags", 40, 2),
				new FieldDescriptor("Cas", 48, 2),
				new FieldDescriptor("Delta", 56, 2)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional int32 Opcode = 1;
		public int Opcode { get { return _opcode; } set { _b0|=0x01; _opcode = value; } }
		// optional bytes Data = 2;
		public byte[] Data { get { return _data; } set { _data = value; } }
		// optional bytes Key = 3;
		public byte[] Key { get { return _key; } set { _key = value; } }
		// optional uint32 Expires = 4;
		public uint Expires { get { return _expires; } set { _b0|=0x02; _expires = value; } }
		// optional uint64 Flags = 5;
		public ulong Flags { get { return _flags; } set { _b0|=0x04; _flags = value; } }
		// optional uint64 Cas = 6;
		public ulong Cas { get { return _cas; } set { _b0|=0x08; _cas = value; } }
		// optional uint64 Delta = 7;
		public ulong Delta { get { return _delta; } set { _b0|=0x10; _delta = value; } }
		
		#region message fields
		
		private int _opcode;
		public void ClearOpcode() { _b0&=~0x01; _opcode = 0; }
		public bool HasOpcode { get { return (_b0&0x01) != 0; } }
		private byte[] _data;
		public void ClearData() { _data = null; }
		public bool HasData { get { return _data != null; } }
		private byte[] _key;
		public void ClearKey() { _key = null; }
		public bool HasKey { get { return _key != null; } }
		private uint _expires;
		public void ClearExpires() { _b0&=~0x02; _expires = 0; }
		public bool HasExpires { get { return (_b0&0x02) != 0; } }
		private ulong _flags;
		public void ClearFlags() { _b0&=~0x04; _flags = 0; }
		public bool HasFlags { get { return (_b0&0x04) != 0; } }
		private ulong _cas;
		public void ClearCas() { _b0&=~0x08; _cas = 0; }
		public bool HasCas { get { return (_b0&0x08) != 0; } }
		private ulong _delta;
		public void ClearDelta() { _b0&=~0x10; _delta = 0; }
		public bool HasDelta { get { return (_b0&0x10) != 0; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new CachedRequest(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_opcode = 0;
			_data = null;
			_key = null;
			_expires = 0;
			_flags = 0;
			_cas = 0;
			_delta = 0;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as CachedRequest;
			if(test==null) return false;
			if(_opcode != test._opcode) return false;
			if(!Pbs.EqualBytes(_data,test._data)) return false;
			if(!Pbs.EqualBytes(_key,test._key)) return false;
			if(_expires != test._expires) return false;
			if(_flags != test._flags) return false;
			if(_cas != test._cas) return false;
			if(_delta != test._delta) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Opcode = dr_.AsInt(); break;
				case 1: Data = dr_.AsBytes(); break;
				case 2: Key = dr_.AsBytes(); break;
				case 3: Expires = (uint)dr_.AsInt(); break;
				case 4: Flags = (ulong)dr_.AsLong(); break;
				case 5: Cas = (ulong)dr_.AsLong(); break;
				case 6: Delta = (ulong)dr_.AsLong(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasOpcode) _gss_+= 1 + Pbs.i32(_opcode);
			if(HasData) _gss_+= 1 + Pbs.bts(_data);
			if(HasKey) _gss_+= 1 + Pbs.bts(_key);
			if(HasExpires) _gss_+= 1 + Pbs.i32((int)_expires);
			if(HasFlags) _gss_+= 1 + Pbs.i64((long)_flags);
			if(HasCas) _gss_+= 1 + Pbs.i64((long)_cas);
			if(HasDelta) _gss_+= 1 + Pbs.i64((long)_delta);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasOpcode) wr_.AsInt(fs_[0], _opcode);
			if(HasData) wr_.AsBytes(fs_[1], _data);
			if(HasKey) wr_.AsBytes(fs_[2], _key);
			if(HasExpires) wr_.AsInt(fs_[3], (int)_expires);
			if(HasFlags) wr_.AsLong(fs_[4], (long)_flags);
			if(HasCas) wr_.AsLong(fs_[5], (long)_cas);
			if(HasDelta) wr_.AsLong(fs_[6], (long)_delta);
		}
		
		#endregion
	}
	
	public sealed partial class CachedResponse : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("CachedResponse");
			_init_ds_(_boot_ds_, new CachedResponse(),
				new FieldDescriptor("Status", 8, 1),
				new FieldDescriptor("Data", 18, 6),
				new FieldDescriptor("Expires", 24, 1),
				new FieldDescriptor("Flags", 32, 1),
				new FieldDescriptor("Cas", 40, 2),
				new FieldDescriptor("Counter", 48, 2)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional int32 Status = 1;
		public int Status { get { return _status; } set { _b0|=0x01; _status = value; } }
		// optional bytes Data = 2;
		public byte[] Data { get { return _data; } set { _data = value; } }
		// optional uint32 Expires = 3;
		public uint Expires { get { return _expires; } set { _b0|=0x02; _expires = value; } }
		// optional uint32 Flags = 4;
		public uint Flags { get { return _flags; } set { _b0|=0x04; _flags = value; } }
		// optional uint64 Cas = 5;
		public ulong Cas { get { return _cas; } set { _b0|=0x08; _cas = value; } }
		// optional uint64 Counter = 6;
		public ulong Counter { get { return _counter; } set { _b0|=0x10; _counter = value; } }
		
		#region message fields
		
		private int _status;
		public void ClearStatus() { _b0&=~0x01; _status = 0; }
		public bool HasStatus { get { return (_b0&0x01) != 0; } }
		private byte[] _data;
		public void ClearData() { _data = null; }
		public bool HasData { get { return _data != null; } }
		private uint _expires;
		public void ClearExpires() { _b0&=~0x02; _expires = 0; }
		public bool HasExpires { get { return (_b0&0x02) != 0; } }
		private uint _flags;
		public void ClearFlags() { _b0&=~0x04; _flags = 0; }
		public bool HasFlags { get { return (_b0&0x04) != 0; } }
		private ulong _cas;
		public void ClearCas() { _b0&=~0x08; _cas = 0; }
		public bool HasCas { get { return (_b0&0x08) != 0; } }
		private ulong _counter;
		public void ClearCounter() { _b0&=~0x10; _counter = 0; }
		public bool HasCounter { get { return (_b0&0x10) != 0; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new CachedResponse(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_status = 0;
			_data = null;
			_expires = 0;
			_flags = 0;
			_cas = 0;
			_counter = 0;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as CachedResponse;
			if(test==null) return false;
			if(_status != test._status) return false;
			if(!Pbs.EqualBytes(_data,test._data)) return false;
			if(_expires != test._expires) return false;
			if(_flags != test._flags) return false;
			if(_cas != test._cas) return false;
			if(_counter != test._counter) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Status = dr_.AsInt(); break;
				case 1: Data = dr_.AsBytes(); break;
				case 2: Expires = (uint)dr_.AsInt(); break;
				case 3: Flags = (uint)dr_.AsInt(); break;
				case 4: Cas = (ulong)dr_.AsLong(); break;
				case 5: Counter = (ulong)dr_.AsLong(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasStatus) _gss_+= 1 + Pbs.i32(_status);
			if(HasData) _gss_+= 1 + Pbs.bts(_data);
			if(HasExpires) _gss_+= 1 + Pbs.i32((int)_expires);
			if(HasFlags) _gss_+= 1 + Pbs.i32((int)_flags);
			if(HasCas) _gss_+= 1 + Pbs.i64((long)_cas);
			if(HasCounter) _gss_+= 1 + Pbs.i64((long)_counter);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasStatus) wr_.AsInt(fs_[0], _status);
			if(HasData) wr_.AsBytes(fs_[1], _data);
			if(HasExpires) wr_.AsInt(fs_[2], (int)_expires);
			if(HasFlags) wr_.AsInt(fs_[3], (int)_flags);
			if(HasCas) wr_.AsLong(fs_[4], (long)_cas);
			if(HasCounter) wr_.AsLong(fs_[5], (long)_counter);
		}
		
		#endregion
	}
	
	public sealed partial class CachedStats : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("CachedStats");
			_init_ds_(_boot_ds_, new CachedStats(),
				new FieldDescriptor("Uptime", 8, 1),
				new FieldDescriptor("CurrentItems", 16, 2),
				new FieldDescriptor("CurrentBytes", 24, 2),
				new FieldDescriptor("TotalMemory", 32, 2),
				new FieldDescriptor("Evictions", 40, 2),
				new FieldDescriptor("Requests", 48, 2),
				new FieldDescriptor("GetHits", 56, 2),
				new FieldDescriptor("Updates", 64, 2),
				new FieldDescriptor("Misses", 72, 2),
				new FieldDescriptor("BytesOut", 80, 2),
				new FieldDescriptor("BytesIn", 88, 2),
				new FieldDescriptor("BpsIn", 96, 2),
				new FieldDescriptor("BpsOut", 104, 2),
				new FieldDescriptor("Rps", 112, 2),
				new FieldDescriptor("Address", 122, 5)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional uint32 Uptime = 1;
		public uint Uptime { get { return _uptime; } set { _b0|=0x01; _uptime = value; } }
		// optional uint64 CurrentItems = 2;
		public ulong CurrentItems { get { return _currentItems; } set { _b0|=0x02; _currentItems = value; } }
		// optional uint64 CurrentBytes = 3;
		public ulong CurrentBytes { get { return _currentBytes; } set { _b0|=0x04; _currentBytes = value; } }
		// optional uint64 TotalMemory = 4;
		public ulong TotalMemory { get { return _totalMemory; } set { _b0|=0x08; _totalMemory = value; } }
		// optional uint64 Evictions = 5;
		public ulong Evictions { get { return _evictions; } set { _b0|=0x10; _evictions = value; } }
		// optional uint64 Requests = 6;
		public ulong Requests { get { return _requests; } set { _b0|=0x20; _requests = value; } }
		// optional uint64 GetHits = 7;
		public ulong GetHits { get { return _getHits; } set { _b0|=0x40; _getHits = value; } }
		// optional uint64 Updates = 8;
		public ulong Updates { get { return _updates; } set { _b0|=0x80; _updates = value; } }
		// optional uint64 Misses = 9;
		public ulong Misses { get { return _misses; } set { _b0|=0x0100; _misses = value; } }
		// optional uint64 BytesOut = 10;
		public ulong BytesOut { get { return _bytesOut; } set { _b0|=0x0200; _bytesOut = value; } }
		// optional uint64 BytesIn = 11;
		public ulong BytesIn { get { return _bytesIn; } set { _b0|=0x0400; _bytesIn = value; } }
		// optional uint64 BpsIn = 12;
		public ulong BpsIn { get { return _bpsIn; } set { _b0|=0x0800; _bpsIn = value; } }
		// optional uint64 BpsOut = 13;
		public ulong BpsOut { get { return _bpsOut; } set { _b0|=0x1000; _bpsOut = value; } }
		// optional uint64 Rps = 14;
		public ulong Rps { get { return _rps; } set { _b0|=0x2000; _rps = value; } }
		// optional string Address = 15;
		public string Address { get { return _address; } set { _address = value; } }
		
		#region message fields
		
		private uint _uptime;
		public void ClearUptime() { _b0&=~0x01; _uptime = 0; }
		public bool HasUptime { get { return (_b0&0x01) != 0; } }
		private ulong _currentItems;
		public void ClearCurrentItems() { _b0&=~0x02; _currentItems = 0; }
		public bool HasCurrentItems { get { return (_b0&0x02) != 0; } }
		private ulong _currentBytes;
		public void ClearCurrentBytes() { _b0&=~0x04; _currentBytes = 0; }
		public bool HasCurrentBytes { get { return (_b0&0x04) != 0; } }
		private ulong _totalMemory;
		public void ClearTotalMemory() { _b0&=~0x08; _totalMemory = 0; }
		public bool HasTotalMemory { get { return (_b0&0x08) != 0; } }
		private ulong _evictions;
		public void ClearEvictions() { _b0&=~0x10; _evictions = 0; }
		public bool HasEvictions { get { return (_b0&0x10) != 0; } }
		private ulong _requests;
		public void ClearRequests() { _b0&=~0x20; _requests = 0; }
		public bool HasRequests { get { return (_b0&0x20) != 0; } }
		private ulong _getHits;
		public void ClearGetHits() { _b0&=~0x40; _getHits = 0; }
		public bool HasGetHits { get { return (_b0&0x40) != 0; } }
		private ulong _updates;
		public void ClearUpdates() { _b0&=~0x80; _updates = 0; }
		public bool HasUpdates { get { return (_b0&0x80) != 0; } }
		private ulong _misses;
		public void ClearMisses() { _b0&=~0x0100; _misses = 0; }
		public bool HasMisses { get { return (_b0&0x0100) != 0; } }
		private ulong _bytesOut;
		public void ClearBytesOut() { _b0&=~0x0200; _bytesOut = 0; }
		public bool HasBytesOut { get { return (_b0&0x0200) != 0; } }
		private ulong _bytesIn;
		public void ClearBytesIn() { _b0&=~0x0400; _bytesIn = 0; }
		public bool HasBytesIn { get { return (_b0&0x0400) != 0; } }
		private ulong _bpsIn;
		public void ClearBpsIn() { _b0&=~0x0800; _bpsIn = 0; }
		public bool HasBpsIn { get { return (_b0&0x0800) != 0; } }
		private ulong _bpsOut;
		public void ClearBpsOut() { _b0&=~0x1000; _bpsOut = 0; }
		public bool HasBpsOut { get { return (_b0&0x1000) != 0; } }
		private ulong _rps;
		public void ClearRps() { _b0&=~0x2000; _rps = 0; }
		public bool HasRps { get { return (_b0&0x2000) != 0; } }
		private string _address;
		public void ClearAddress() { _address = null; }
		public bool HasAddress { get { return _address != null; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new CachedStats(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_uptime = 0;
			_currentItems = 0;
			_currentBytes = 0;
			_totalMemory = 0;
			_evictions = 0;
			_requests = 0;
			_getHits = 0;
			_updates = 0;
			_misses = 0;
			_bytesOut = 0;
			_bytesIn = 0;
			_bpsIn = 0;
			_bpsOut = 0;
			_rps = 0;
			_address = null;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as CachedStats;
			if(test==null) return false;
			if(_uptime != test._uptime) return false;
			if(_currentItems != test._currentItems) return false;
			if(_currentBytes != test._currentBytes) return false;
			if(_totalMemory != test._totalMemory) return false;
			if(_evictions != test._evictions) return false;
			if(_requests != test._requests) return false;
			if(_getHits != test._getHits) return false;
			if(_updates != test._updates) return false;
			if(_misses != test._misses) return false;
			if(_bytesOut != test._bytesOut) return false;
			if(_bytesIn != test._bytesIn) return false;
			if(_bpsIn != test._bpsIn) return false;
			if(_bpsOut != test._bpsOut) return false;
			if(_rps != test._rps) return false;
			if(_address != test._address) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Uptime = (uint)dr_.AsInt(); break;
				case 1: CurrentItems = (ulong)dr_.AsLong(); break;
				case 2: CurrentBytes = (ulong)dr_.AsLong(); break;
				case 3: TotalMemory = (ulong)dr_.AsLong(); break;
				case 4: Evictions = (ulong)dr_.AsLong(); break;
				case 5: Requests = (ulong)dr_.AsLong(); break;
				case 6: GetHits = (ulong)dr_.AsLong(); break;
				case 7: Updates = (ulong)dr_.AsLong(); break;
				case 8: Misses = (ulong)dr_.AsLong(); break;
				case 9: BytesOut = (ulong)dr_.AsLong(); break;
				case 10: BytesIn = (ulong)dr_.AsLong(); break;
				case 11: BpsIn = (ulong)dr_.AsLong(); break;
				case 12: BpsOut = (ulong)dr_.AsLong(); break;
				case 13: Rps = (ulong)dr_.AsLong(); break;
				case 14: Address = dr_.AsString(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasUptime) _gss_+= 1 + Pbs.i32((int)_uptime);
			if(HasCurrentItems) _gss_+= 1 + Pbs.i64((long)_currentItems);
			if(HasCurrentBytes) _gss_+= 1 + Pbs.i64((long)_currentBytes);
			if(HasTotalMemory) _gss_+= 1 + Pbs.i64((long)_totalMemory);
			if(HasEvictions) _gss_+= 1 + Pbs.i64((long)_evictions);
			if(HasRequests) _gss_+= 1 + Pbs.i64((long)_requests);
			if(HasGetHits) _gss_+= 1 + Pbs.i64((long)_getHits);
			if(HasUpdates) _gss_+= 1 + Pbs.i64((long)_updates);
			if(HasMisses) _gss_+= 1 + Pbs.i64((long)_misses);
			if(HasBytesOut) _gss_+= 1 + Pbs.i64((long)_bytesOut);
			if(HasBytesIn) _gss_+= 1 + Pbs.i64((long)_bytesIn);
			if(HasBpsIn) _gss_+= 1 + Pbs.i64((long)_bpsIn);
			if(HasBpsOut) _gss_+= 1 + Pbs.i64((long)_bpsOut);
			if(HasRps) _gss_+= 1 + Pbs.i64((long)_rps);
			if(HasAddress) _gss_+= 1 + Pbs.str(_address);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasUptime) wr_.AsInt(fs_[0], (int)_uptime);
			if(HasCurrentItems) wr_.AsLong(fs_[1], (long)_currentItems);
			if(HasCurrentBytes) wr_.AsLong(fs_[2], (long)_currentBytes);
			if(HasTotalMemory) wr_.AsLong(fs_[3], (long)_totalMemory);
			if(HasEvictions) wr_.AsLong(fs_[4], (long)_evictions);
			if(HasRequests) wr_.AsLong(fs_[5], (long)_requests);
			if(HasGetHits) wr_.AsLong(fs_[6], (long)_getHits);
			if(HasUpdates) wr_.AsLong(fs_[7], (long)_updates);
			if(HasMisses) wr_.AsLong(fs_[8], (long)_misses);
			if(HasBytesOut) wr_.AsLong(fs_[9], (long)_bytesOut);
			if(HasBytesIn) wr_.AsLong(fs_[10], (long)_bytesIn);
			if(HasBpsIn) wr_.AsLong(fs_[11], (long)_bpsIn);
			if(HasBpsOut) wr_.AsLong(fs_[12], (long)_bpsOut);
			if(HasRps) wr_.AsLong(fs_[13], (long)_rps);
			if(HasAddress) wr_.AsString(fs_[14], _address);
		}
		
		#endregion
	}
	
	public sealed partial class CachedConfiguration : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("CachedConfiguration");
			_init_ds_(_boot_ds_, new CachedConfiguration(),
				new FieldDescriptor("AllocPageSize", 8, 1),
				new FieldDescriptor("CacheSize", 16, 1),
				new FieldDescriptor("ReserveMemory", 24, 13),
				new FieldDescriptor("UseLargePages", 32, 13),
				new FieldDescriptor("HashTableSize", 40, 1),
				new FieldDescriptor("Address", 50, 5),
				new FieldDescriptor("Name", 58, 5)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// optional uint32 AllocPageSize = 1;
		public uint AllocPageSize { get { return _allocPageSize; } set { _b0|=0x01; _allocPageSize = value; } }
		// optional uint32 CacheSize = 2;
		public uint CacheSize { get { return _cacheSize; } set { _b0|=0x02; _cacheSize = value; } }
		// optional bool ReserveMemory = 3;
		public bool ReserveMemory { get { return _reserveMemory; } set { _b0|=0x04; _reserveMemory = value; } }
		// optional bool UseLargePages = 4;
		public bool UseLargePages { get { return _useLargePages; } set { _b0|=0x08; _useLargePages = value; } }
		// optional uint32 HashTableSize = 5;
		public uint HashTableSize { get { return _hashTableSize; } set { _b0|=0x10; _hashTableSize = value; } }
		// optional string Address = 6;
		public string Address { get { return _address; } set { _address = value; } }
		// optional string Name = 7;
		public string Name { get { return _name; } set { _name = value; } }
		
		#region message fields
		
		private uint _allocPageSize;
		public void ClearAllocPageSize() { _b0&=~0x01; _allocPageSize = 8; }
		public bool HasAllocPageSize { get { return (_b0&0x01) != 0; } }
		private uint _cacheSize;
		public void ClearCacheSize() { _b0&=~0x02; _cacheSize = 64; }
		public bool HasCacheSize { get { return (_b0&0x02) != 0; } }
		private bool _reserveMemory;
		public void ClearReserveMemory() { _b0&=~0x04; _reserveMemory = true; }
		public bool HasReserveMemory { get { return (_b0&0x04) != 0; } }
		private bool _useLargePages;
		public void ClearUseLargePages() { _b0&=~0x08; _useLargePages = true; }
		public bool HasUseLargePages { get { return (_b0&0x08) != 0; } }
		private uint _hashTableSize;
		public void ClearHashTableSize() { _b0&=~0x10; _hashTableSize = 65536; }
		public bool HasHashTableSize { get { return (_b0&0x10) != 0; } }
		private string _address;
		public void ClearAddress() { _address = null; }
		public bool HasAddress { get { return _address != null; } }
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		
		#endregion
		
		#region message methods
		
		public CachedConfiguration()
		{
			_allocPageSize = 8;
			_cacheSize = 64;
			_reserveMemory = true;
			_useLargePages = true;
			_hashTableSize = 65536;
		}
		public override Message New() { return new CachedConfiguration(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_allocPageSize = 8;
			_cacheSize = 64;
			_reserveMemory = true;
			_useLargePages = true;
			_hashTableSize = 65536;
			_address = null;
			_name = null;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as CachedConfiguration;
			if(test==null) return false;
			if(_allocPageSize != test._allocPageSize) return false;
			if(_cacheSize != test._cacheSize) return false;
			if(_reserveMemory != test._reserveMemory) return false;
			if(_useLargePages != test._useLargePages) return false;
			if(_hashTableSize != test._hashTableSize) return false;
			if(_address != test._address) return false;
			if(_name != test._name) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: AllocPageSize = (uint)dr_.AsInt(); break;
				case 1: CacheSize = (uint)dr_.AsInt(); break;
				case 2: ReserveMemory = dr_.AsBool(); break;
				case 3: UseLargePages = dr_.AsBool(); break;
				case 4: HashTableSize = (uint)dr_.AsInt(); break;
				case 5: Address = dr_.AsString(); break;
				case 6: Name = dr_.AsString(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasAllocPageSize) _gss_+= 1 + Pbs.i32((int)_allocPageSize);
			if(HasCacheSize) _gss_+= 1 + Pbs.i32((int)_cacheSize);
			if(HasReserveMemory) _gss_+= 2;
			if(HasUseLargePages) _gss_+= 2;
			if(HasHashTableSize) _gss_+= 1 + Pbs.i32((int)_hashTableSize);
			if(HasAddress) _gss_+= 1 + Pbs.str(_address);
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasAllocPageSize) wr_.AsInt(fs_[0], (int)_allocPageSize);
			if(HasCacheSize) wr_.AsInt(fs_[1], (int)_cacheSize);
			if(HasReserveMemory) wr_.AsBool(fs_[2], _reserveMemory);
			if(HasUseLargePages) wr_.AsBool(fs_[3], _useLargePages);
			if(HasHashTableSize) wr_.AsInt(fs_[4], (int)_hashTableSize);
			if(HasAddress) wr_.AsString(fs_[5], _address);
			if(HasName) wr_.AsString(fs_[6], _name);
		}
		
		#endregion
	}
}