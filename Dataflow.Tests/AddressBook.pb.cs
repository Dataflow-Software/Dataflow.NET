// autogenerated by Dataflow Software implementation of Protocol Buffers to C# compiler

using System;
using Dataflow.Serialization;

namespace tutorial
{
	// package: tutorial
	
	public sealed partial class Person : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Person", Pbs.iNone);
			_init_ds_(_boot_ds_, new Person(),
				new FieldDescriptor("name", 10, 133),
				new FieldDescriptor("id", 16, 129),
				new FieldDescriptor("email", 26, 5),
				new FieldDescriptor("phone", 34, 79, PhoneNumber.Descriptor)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		public enum PhoneType
		{
			MOBILE = 0, HOME = 1, WORK = 2
		}
		
		public static partial class EnumDescriptors
		{
			public static readonly EnumDescriptor PhoneType = new EnumDescriptor( "PhoneType",
				new EnumFieldDescriptor("MOBILE", 0),
				new EnumFieldDescriptor("HOME", 1),
				new EnumFieldDescriptor("WORK", 2)
			);
		}
		
		public sealed partial class PhoneNumber : Message
		{
			private static MessageDescriptor _boot_ds_; 
			private static MessageDescriptor _boot_ds() 
			{
				_boot_ds_= new MessageDescriptor_30("PhoneNumber", Pbs.iNone);
				_init_ds_(_boot_ds_, new PhoneNumber(),
					new FieldDescriptor("number", 10, 133),
					new FieldDescriptor("type", 16, 16, EnumDescriptors.PhoneType)
				);
				return _boot_ds_;
			}
			public override MessageDescriptor GetDescriptor() { return Descriptor; }
			public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
			// bit-masks for tracking nulls in value type fields.
			private int _b0;
			
			// required string number = 1;
			public string Number { get { return _number; } set { _number = value; } }
			// optional PhoneType type = 2;
			public PhoneType Type { get { return _type; } set { _b0|=0x01; _type = value; } }
			
			#region message fields
			
			private string _number;
			public void ClearNumber() { _number = null; }
			public bool HasNumber { get { return _number != null; } }
			private PhoneType _type;
			public void ClearType() { _b0&=~0x01; _type = tutorial.Person.PhoneType.HOME; }
			public bool HasType { get { return (_b0&0x01) != 0; } }
			
			#endregion
			
			#region message methods
			
			public PhoneNumber()
			{
				_type = tutorial.Person.PhoneType.HOME;
			}
			public override Message New() { return new PhoneNumber(); }
			public override void Clear()
			{
				_memoized_size = _b0 = 0;
				_number = null;
				_type = tutorial.Person.PhoneType.HOME;
			}
			public override int GetHashCode() { return base.GetHashCode(); }
			public override bool Equals(object msg)
			{
				var test = msg as PhoneNumber;
				if(test==null) return false;
				if(_number != test._number) return false;
				if(_type != test._type) return false;
				return true;
			}
			public override bool IsInitialized()
			{
				if( !HasNumber ) return false;
				return true;
			}
			public override void Get(FieldDescriptor ds_, IDataReader dr_)
			{
				switch( ds_.Pos )
				{
					case 0: Number = dr_.AsString(); break;
					case 1: Type = (PhoneType)dr_.AsEnum(EnumDescriptors.PhoneType); break;
				}
			}
			public override int GetSerializedSize()
			{
				int _gss_= 0;
				if(HasNumber) _gss_+= 1 + Pbs.str(_number);
				if(HasType) _gss_+= 2;
				return _memoized_size = _gss_;
			}
			public override void Put(IDataWriter wr_)
			{
				var fs_ = Descriptor.Fields;
				if(HasNumber) wr_.AsString(fs_[0], _number);
				if(HasType) wr_.AsEnum(fs_[1], (int)_type);
			}
			
			#endregion
		}
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// required string name = 1;
		public string Name { get { return _name; } set { _name = value; } }
		// required int32 id = 2;
		public int Id { get { return _id; } set { _b0|=0x01; _id = value; } }
		// optional string email = 3;
		public string Email { get { return _email; } set { _b0|=0x02; _email = value; } }
		// repeated PhoneNumber phone = 4;
		public PhoneNumber[] Phone { get { return _phone.Items; } set { _phone.Items = value; } }
		
		#region message fields
		
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		private int _id;
		public void ClearId() { _b0&=~0x01; _id = 0; }
		public bool HasId { get { return (_b0&0x01) != 0; } }
		private string _email;
		public void ClearEmail() { _b0&=~0x02; _email = "lamer@aol.com"; }
		public bool HasEmail { get { return (_b0&0x02) != 0; } }
		private Repeated<PhoneNumber> _phone;
		public PhoneNumber AddPhone(PhoneNumber i) { return _phone.Add(i); }
		public PhoneNumber GetPhone(int i) { return _phone[i]; }
		public int PhoneCount { get { return _phone.Count; } }
		public void ClearPhone() { _phone.Clear(); }
		
		#endregion
		
		#region message methods
		
		public Person()
		{
			_email = "lamer@aol.com";
		}
		public override Message New() { return new Person(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_name = null;
			_id = 0;
			_email = "lamer@aol.com";
			_phone.Clear();
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Person;
			if(test==null) return false;
			if(_name != test._name) return false;
			if(_id != test._id) return false;
			if(_email != test._email) return false;
			if(_phone.Count != test._phone.Count) return false; for(var i = 0; i < _phone.Count; i++) if(!_phone[i].Equals(test._phone[i])) return false;
			return true;
		}
		public override bool IsInitialized()
		{
			if( !HasName ) return false;
			if( !HasId ) return false;
			for(var i=0; i<_phone.Count; i++) if(!_phone[i].IsInitialized()) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Name = dr_.AsString(); break;
				case 1: Id = dr_.AsInt(); break;
				case 2: Email = dr_.AsString(); break;
				case 3: { var _f3_= new PhoneNumber(); dr_.AsMessage(_f3_, ds_); _phone.Add(_f3_); } break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0, _cnt_= 0;
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			if(HasId) _gss_+= 1 + Pbs.i32(_id);
			if(HasEmail) _gss_+= 1 + Pbs.str(_email);
			if ((_cnt_=_phone.Count) > 0) { _gss_+= _cnt_; foreach(var item in _phone.Items) _gss_+= Pbs.msg(item); }
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasName) wr_.AsString(fs_[0], _name);
			if(HasId) wr_.AsInt(fs_[1], _id);
			if(HasEmail) wr_.AsString(fs_[2], _email);
			if(_phone.Count > 0) wr_.AsRepeated(fs_[3], _phone.Items);
		}
		
		#endregion
	}
	
	public sealed partial class AddressBook : MessageArray<Person>
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("AddressBook", Pbs.iList);
			_init_ds_(_boot_ds_, new AddressBook(),
				new FieldDescriptor("persona", 10, 2127, Person.Descriptor)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// repeated Person persona = 1;
		public Person[] Persona { get { return _msgs.Items; } set { _msgs.Items = value; } }
		
		#region message fields
		
		public Person AddPersona(Person i) { return _msgs.Add(i); }
		public Person GetPersona(int i) { return _msgs[i]; }
		public int PersonaCount { get { return _msgs.Count; } }
		public void ClearPersona() { _msgs.Clear(); }
		
		#endregion
		
		#region message methods
		
		public AddressBook() {}
		public AddressBook( Person[] value ) { Persona = value; }
		public override Message New() { return new AddressBook(); }
		
		#endregion
	}
}