// autogenerated by Dataflow Software implementation of Protocol Buffers to C# compiler

using System;
using Dataflow.Serialization;

namespace Dataflow.Tests
{
	// package: Dataflow.Tests
	
	public enum Align
	{
		Left = 1, Right = 2, Center = 3
	}
	
	public static partial class EnumDescriptors
	{
		public static readonly EnumDescriptor Align = new EnumDescriptor( "Align",
			new EnumFieldDescriptor("Left", 1),
			new EnumFieldDescriptor("Right", 2),
			new EnumFieldDescriptor("Center", 3)
		);
	}
	
	public sealed partial class ProtoMessageSample : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("ProtoMessageSample", Pbs.iNone);
			_init_ds_(_boot_ds_, new ProtoMessageSample(),
				new FieldDescriptor("id", 8, 129),
				new FieldDescriptor("name", 18, 5),
				new FieldDescriptor("align", 24, 16, EnumDescriptors.Align),
				new FieldDescriptor("weights", 33, 332)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		// bit-masks for tracking nulls in value type fields.
		private int _b0;
		
		// required int32 id = 1;
		public int Id { get { return _id; } set { _b0|=0x01; _id = value; } }
		// optional string name = 2;
		public string Name { get { return _name; } set { _name = value; } }
		// optional Align align = 3;
		public Align Align { get { return _align; } set { _b0|=0x02; _align = value; } }
		// repeated double weights = 4;
		public double[] Weights { get { return _weights.Items; } set { _weights.Items = value; } }
		
		#region message fields
		
		private int _id;
		public void ClearId() { _b0&=~0x01; _id = 0; }
		public bool HasId { get { return (_b0&0x01) != 0; } }
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		private Align _align;
		public void ClearAlign() { _b0&=~0x02; _align = Align.Left; }
		public bool HasAlign { get { return (_b0&0x02) != 0; } }
		private Repeated<double> _weights;
		public double AddWeights(double i) { return _weights.Add(i); }
		public double GetWeights(int i) { return _weights[i]; }
		public int WeightsCount { get { return _weights.Count; } }
		public void ClearWeights() { _weights.Clear(); }
		
		#endregion
		
		#region message methods
		
		public ProtoMessageSample()
		{
			_id = 0;
			_align = Align.Left;
		}
		public override Message New() { return new ProtoMessageSample(); }
		public override void Clear()
		{
			_memoized_size = _b0 = 0;
			_id = 0;
			_name = null;
			_align = Align.Left;
			_weights.Clear();
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as ProtoMessageSample;
			if(test==null) return false;
			if(_id != test._id) return false;
			if(_name != test._name) return false;
			if(_align != test._align) return false;
			if(_weights.Count != test._weights.Count) return false; for(var i = 0; i < _weights.Count; i++) if(_weights[i] != test._weights[i]) return false;
			return true;
		}
		public override bool IsInitialized()
		{
			if( !HasId ) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Id = dr_.AsInt(); break;
				case 1: Name = dr_.AsString(); break;
				case 2: Align = (Align)dr_.AsEnum(EnumDescriptors.Align); break;
				case 3: _weights.Add(dr_.AsDouble()); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0, _cnt_= 0;
			if(HasId) _gss_+= 1 + Pbs.i32(_id);
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			if(HasAlign) _gss_+= 2;
			if ((_cnt_=_weights.Count) > 0) { _gss_+= 1 + Pbs.szPfx(8*_cnt_); }
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasId) wr_.AsInt(fs_[0], _id);
			if(HasName) wr_.AsString(fs_[1], _name);
			if(HasAlign) wr_.AsEnum(fs_[2], (int)_align);
			if(_weights.Count > 0) wr_.AsRepeated(fs_[3], _weights.Items);
		}
		
		#endregion
	}
	
	public enum Color
	{
		RED = 0, GREEN = 1, BLUE = 2
	}
	
	public static partial class EnumDescriptors
	{
		public static readonly EnumDescriptor Color = new EnumDescriptor( "Color",
			new EnumFieldDescriptor("RED", 0),
			new EnumFieldDescriptor("GREEN", 1),
			new EnumFieldDescriptor("BLUE", 2)
		);
	}
	
	public sealed partial class Any : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("Any", Pbs.iNone);
			_init_ds_(_boot_ds_, new Any(),
				new FieldDescriptor("type_url", 10, 5),
				new FieldDescriptor("value", 18, 6)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional string type_url = 1;
		public string TypeUrl { get { return _type_url; } set { _type_url = value; } }
		// optional bytes value = 2;
		public byte[] Value { get { return _value; } set { _value = value; } }
		
		#region message fields
		
		private string _type_url;
		public void ClearTypeUrl() { _type_url = null; }
		public bool HasTypeUrl { get { return _type_url != null; } }
		private byte[] _value;
		public void ClearValue() { _value = null; }
		public bool HasValue { get { return _value != null; } }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new Any(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_type_url = null;
			_value = null;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as Any;
			if(test==null) return false;
			if(_type_url != test._type_url) return false;
			if(!Pbs.EqualBytes(_value,test._value)) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: TypeUrl = dr_.AsString(); break;
				case 1: Value = dr_.AsBytes(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasTypeUrl) _gss_+= 1 + Pbs.str(_type_url);
			if(HasValue) _gss_+= 1 + Pbs.bts(_value);
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasTypeUrl) wr_.AsString(fs_[0], _type_url);
			if(HasValue) wr_.AsBytes(fs_[1], _value);
		}
		
		#endregion
	}
	
	public sealed partial class KVMap2 : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("KVMap2", Pbs.iNone);
			_init_ds_(_boot_ds_, new KVMap2(),
				new FieldDescriptor("name", 10, 5),
				new FieldDescriptor("rcmap", 18, 82, _map_ds_(1, 15, KVMap2.Descriptor))
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional string name = 1;
		public string Name { get { return _name; } set { _name = value; } }
		// map map rcmap = 2;
		public KeyValueMap<int,KVMap2> Rcmap { get { var map = new KeyValueMap<int,KVMap2>(); foreach(var kv in _rcmap.Items) map.Add((int)kv.lk, (KVMap2)kv.ov); return map; } }
		
		#region message fields
		
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		private static readonly MessageDescriptor _rcmap_desc = Descriptor.Fields[1].MessageType;
		private Repeated<MapEntry> _rcmap;
		public KVMap2 AddRcmap(int key, KVMap2 value) { var kv = GetMapEntry(_rcmap.Items, (long)key, _rcmap_desc); kv.ov = value; _rcmap.Add(kv); return this; }
		public KVMap2 GetRcmap(int key) { return (KVMap2)GetMapEntry(_rcmap.Items, (long)key, null).ov; }
		public int RcmapCount { get { return _rcmap.Count; } }
		public void ClearRcmap() { _rcmap.Clear(); }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new KVMap2(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_name = null;
			_rcmap.Clear();
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as KVMap2;
			if(test==null) return false;
			if(_name != test._name) return false;
			if(_rcmap.Count != test._rcmap.Count) return false; for(var i = 0; i < _rcmap.Count; i++) if(!_rcmap[i].Equals(test._rcmap[i])) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Name = dr_.AsString(); break;
				case 1: { var _kv1_= new MapEntry(_rcmap_desc); dr_.AsMessage(_kv1_, ds_); _rcmap.Add(_kv1_); } break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0, _cnt_= 0;
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			if ((_cnt_=_rcmap.Count) > 0) { _gss_+= _cnt_; foreach(var item in _rcmap.Items) _gss_+= Pbs.msg(item); }
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasName) wr_.AsString(fs_[0], _name);
			if(_rcmap.Count > 0) wr_.AsRepeated(fs_[1], _rcmap.Items);
		}
		
		#endregion
	}
	
	public sealed partial class KVTest : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("KVTest", Pbs.iNone);
			_init_ds_(_boot_ds_, new KVTest(),
				new FieldDescriptor("name", 10, 5),
				new FieldDescriptor("m1", 18, 82, _map_ds_(2, 15, Any.Descriptor)),
				new FieldDescriptor("m2", 26, 82, _map_ds_(5, 16, EnumDescriptors.Color)),
				new FieldDescriptor("m3", 34, 82, _map_ds_(1, 5))
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional string name = 1;
		public string Name { get { return _name; } set { _name = value; } }
		// map map m1 = 2;
		public KeyValueMap<long,Any> M1 { get { var map = new KeyValueMap<long,Any>(); foreach(var kv in _m1.Items) map.Add((long)kv.lk, (Any)kv.ov); return map; } }
		// map map m2 = 3;
		public KeyValueMap<string,Color> M2 { get { var map = new KeyValueMap<string,Color>(); foreach(var kv in _m2.Items) map.Add(kv.sk, (Color)kv.lv); return map; } }
		// map map m3 = 4;
		public KeyValueMap<uint,string> M3 { get { var map = new KeyValueMap<uint,string>(); foreach(var kv in _m3.Items) map.Add((uint)kv.lk, (string)kv.ov); return map; } }
		
		#region message fields
		
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		private static readonly MessageDescriptor _m1_desc = Descriptor.Fields[1].MessageType;
		private Repeated<MapEntry> _m1;
		public KVTest AddM1(long key, Any value) { var kv = GetMapEntry(_m1.Items, (long)key, _m1_desc); kv.ov = value; _m1.Add(kv); return this; }
		public Any GetM1(long key) { return (Any)GetMapEntry(_m1.Items, (long)key, null).ov; }
		public int M1Count { get { return _m1.Count; } }
		public void ClearM1() { _m1.Clear(); }
		private static readonly MessageDescriptor _m2_desc = Descriptor.Fields[2].MessageType;
		private Repeated<MapEntry> _m2;
		public KVTest AddM2(string key, Color value) { var kv = GetMapEntry(_m2.Items, key, _m2_desc); kv.lv = (long)value; _m2.Add(kv); return this; }
		public Color GetM2(string key) { return (Color)GetMapEntry(_m2.Items, key, null).lv; }
		public int M2Count { get { return _m2.Count; } }
		public void ClearM2() { _m2.Clear(); }
		private static readonly MessageDescriptor _m3_desc = Descriptor.Fields[3].MessageType;
		private Repeated<MapEntry> _m3;
		public KVTest AddM3(uint key, string value) { var kv = GetMapEntry(_m3.Items, (long)key, _m3_desc); kv.ov = value; _m3.Add(kv); return this; }
		public string GetM3(uint key) { return (string)GetMapEntry(_m3.Items, (long)key, null).ov; }
		public int M3Count { get { return _m3.Count; } }
		public void ClearM3() { _m3.Clear(); }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new KVTest(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_name = null;
			_m1.Clear();
			_m2.Clear();
			_m3.Clear();
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as KVTest;
			if(test==null) return false;
			if(_name != test._name) return false;
			if(_m1.Count != test._m1.Count) return false; for(var i = 0; i < _m1.Count; i++) if(!_m1[i].Equals(test._m1[i])) return false;
			if(_m2.Count != test._m2.Count) return false; for(var i = 0; i < _m2.Count; i++) if(!_m2[i].Equals(test._m2[i])) return false;
			if(_m3.Count != test._m3.Count) return false; for(var i = 0; i < _m3.Count; i++) if(!_m3[i].Equals(test._m3[i])) return false;
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Name = dr_.AsString(); break;
				case 1: { var _kv1_= new MapEntry(_m1_desc); dr_.AsMessage(_kv1_, ds_); _m1.Add(_kv1_); } break;
				case 2: { var _kv2_= new MapEntry(_m2_desc); dr_.AsMessage(_kv2_, ds_); _m2.Add(_kv2_); } break;
				case 3: { var _kv3_= new MapEntry(_m3_desc); dr_.AsMessage(_kv3_, ds_); _m3.Add(_kv3_); } break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0, _cnt_= 0;
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			if ((_cnt_=_m1.Count) > 0) { _gss_+= _cnt_; foreach(var item in _m1.Items) _gss_+= Pbs.msg(item); }
			if ((_cnt_=_m2.Count) > 0) { _gss_+= _cnt_; foreach(var item in _m2.Items) _gss_+= Pbs.msg(item); }
			if ((_cnt_=_m3.Count) > 0) { _gss_+= _cnt_; foreach(var item in _m3.Items) _gss_+= Pbs.msg(item); }
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasName) wr_.AsString(fs_[0], _name);
			if(_m1.Count > 0) wr_.AsRepeated(fs_[1], _m1.Items);
			if(_m2.Count > 0) wr_.AsRepeated(fs_[2], _m2.Items);
			if(_m3.Count > 0) wr_.AsRepeated(fs_[3], _m3.Items);
		}
		
		#endregion
	}
	
	public sealed partial class OneOfTest : Message
	{
		private static MessageDescriptor _boot_ds_; 
		private static MessageDescriptor _boot_ds() 
		{
			_boot_ds_= new MessageDescriptor_30("OneOfTest", Pbs.iNone);
			_init_ds_(_boot_ds_, new OneOfTest(),
				new FieldDescriptor("str", 10, 5),
				new FieldDescriptor("date", 18, 6),
				new FieldDescriptor("msg", 26, 15, Any.Descriptor),
				new FieldDescriptor("name", 34, 5),
				new FieldDescriptor("i32", 80, 1),
				new FieldDescriptor("bol", 88, 13),
				new FieldDescriptor("cha", 96, 14),
				new FieldDescriptor("si3", 112, 1025),
				new FieldDescriptor("fx3", 125, 9),
				new FieldDescriptor("ui64", 128, 2),
				new FieldDescriptor("si64", 136, 1026),
				new FieldDescriptor("i64", 144, 2),
				new FieldDescriptor("dbl", 153, 12),
				new FieldDescriptor("flt", 165, 11),
				new FieldDescriptor("dat", 168, 7)
			);
			return _boot_ds_;
		}
		public override MessageDescriptor GetDescriptor() { return Descriptor; }
		public static MessageDescriptor Descriptor { get { return _boot_ds_??_boot_ds(); } }
		
		// optional string str = 1;
		public string Str { get { return _ztest_id_== 1?_str : null; } set { _ztest_id_ = 1; _ztest_val_= 0; _ztest_obj_= value; } }
		// optional bytes date = 2;
		public byte[] Date { get { return _ztest_id_== 2?_date : null; } set { _ztest_id_ = 2; _ztest_val_= 0; _ztest_obj_= value; } }
		// optional Any msg = 3;
		public Any Msg { get { return _ztest_id_== 3?_msg : null; } set { _ztest_id_ = 3; _ztest_val_= 0; _ztest_obj_= value; } }
		// optional string name = 4;
		public string Name { get { return _name; } set { _name = value; } }
		// optional int32 i32 = 10;
		public int I32 { get { return _ztest_id_== 10?_i32 : 0; } set { _ztest_id_ = 10; _ztest_obj_= null; _i32 = value; } }
		// optional bool bol = 11;
		public bool Bol { get { return _ztest_id_== 11?_bol : false; } set { _ztest_id_ = 11; _ztest_obj_= null; _bol = value; } }
		// optional char cha = 12;
		public char Cha { get { return _ztest_id_== 12?_cha : '\0'; } set { _ztest_id_ = 12; _ztest_obj_= null; _cha = value; } }
		// optional sint32 si3 = 14;
		public int Si3 { get { return _ztest_id_== 14?_si3 : 0; } set { _ztest_id_ = 14; _ztest_obj_= null; _si3 = value; } }
		// optional fixed32 fx3 = 15;
		public uint Fx3 { get { return _ztest_id_== 15?_fx3 : 0; } set { _ztest_id_ = 15; _ztest_obj_= null; _fx3 = value; } }
		// optional uint64 ui64 = 16;
		public ulong Ui64 { get { return _ztest_id_== 16?_ui64 : 0; } set { _ztest_id_ = 16; _ztest_obj_= null; _ui64 = value; } }
		// optional sint64 si64 = 17;
		public long Si64 { get { return _ztest_id_== 17?_si64 : 0; } set { _ztest_id_ = 17; _ztest_obj_= null; _si64 = value; } }
		// optional int64 i64 = 18;
		public long I64 { get { return _ztest_id_== 18?_i64 : 0; } set { _ztest_id_ = 18; _ztest_obj_= null; _i64 = value; } }
		// optional double dbl = 19;
		public double Dbl { get { return _ztest_id_== 19?_dbl : 0; } set { _ztest_id_ = 19; _ztest_obj_= null; _dbl = value; } }
		// optional float flt = 20;
		public float Flt { get { return _ztest_id_== 20?_flt : 0; } set { _ztest_id_ = 20; _ztest_obj_= null; _flt = value; } }
		// optional datetime dat = 21;
		public DateTime Dat { get { return _ztest_id_== 21?_dat : DateTime.MinValue; } set { _ztest_id_ = 21; _ztest_obj_= null; _dat = value; } }
		
		#region message fields
		
		public enum ZtestCase { Ztest_NOT_SET = 0, Str = 1, Date = 2, Msg = 3, I32 = 10, Bol = 11, Cha = 12, Si3 = 14, Fx3 = 15, Ui64 = 16, Si64 = 17, I64 = 18, Dbl = 19, Flt = 20, Dat = 21 }
		private int _ztest_id_;
		private long _ztest_val_;
		private object _ztest_obj_;
		public ZtestCase OneOfZtest { get { return (ZtestCase)_ztest_id_; } } 
		public void ClearZtest() { _ztest_val_= 0; _ztest_obj_= null; _ztest_id_= 0; } 
		
		private string _str { get { return (string)_ztest_obj_; } set { _ztest_obj_= value; }  }
		public bool HasStr { get { return _ztest_id_== 1; } }
		public void ClearStr() { if (_ztest_id_== 1) _ztest_id_= 0; }
		private byte[] _date { get { return (byte[])_ztest_obj_; } set { _ztest_obj_= value; }  }
		public bool HasDate { get { return _ztest_id_== 2; } }
		public void ClearDate() { if (_ztest_id_== 2) _ztest_id_= 0; }
		private Any _msg { get { return (Any)_ztest_obj_; } set { _ztest_obj_= value; }  }
		public bool HasMsg { get { return _ztest_id_== 3; } }
		public void ClearMsg() { if (_ztest_id_== 3) _ztest_id_= 0; }
		private string _name;
		public void ClearName() { _name = null; }
		public bool HasName { get { return _name != null; } }
		private int _i32 { get { return (int)_ztest_val_; } set { _ztest_val_= (long)value; } }
		public bool HasI32 { get { return _ztest_id_== 10; } }
		public void ClearI32() { if (_ztest_id_== 10) _ztest_id_= 0; }
		private bool _bol { get { return _ztest_val_!=0; } set { _ztest_val_ = value?1:0; } }
		public bool HasBol { get { return _ztest_id_== 11; } }
		public void ClearBol() { if (_ztest_id_== 11) _ztest_id_= 0; }
		private char _cha { get { return (char)_ztest_val_; } set { _ztest_val_= (long)value; } }
		public bool HasCha { get { return _ztest_id_== 12; } }
		public void ClearCha() { if (_ztest_id_== 12) _ztest_id_= 0; }
		private int _si3 { get { return (int)_ztest_val_; } set { _ztest_val_= (long)value; } }
		public bool HasSi3 { get { return _ztest_id_== 14; } }
		public void ClearSi3() { if (_ztest_id_== 14) _ztest_id_= 0; }
		private uint _fx3 { get { return (uint)_ztest_val_; } set { _ztest_val_= (long)value; } }
		public bool HasFx3 { get { return _ztest_id_== 15; } }
		public void ClearFx3() { if (_ztest_id_== 15) _ztest_id_= 0; }
		private ulong _ui64 { get { return (ulong)_ztest_val_; } set { _ztest_val_= (long)value; } }
		public bool HasUi64 { get { return _ztest_id_== 16; } }
		public void ClearUi64() { if (_ztest_id_== 16) _ztest_id_= 0; }
		private long _si64 { get { return _ztest_val_; } set { _ztest_val_= value; } }
		public bool HasSi64 { get { return _ztest_id_== 17; } }
		public void ClearSi64() { if (_ztest_id_== 17) _ztest_id_= 0; }
		private long _i64 { get { return _ztest_val_; } set { _ztest_val_= value; } }
		public bool HasI64 { get { return _ztest_id_== 18; } }
		public void ClearI64() { if (_ztest_id_== 18) _ztest_id_= 0; }
		private double _dbl { get { return Pbs.SetDoubleBits(_ztest_val_); } set { _ztest_val_ = Pbs.GetDoubleBits(value); } }
		public bool HasDbl { get { return _ztest_id_== 19; } }
		public void ClearDbl() { if (_ztest_id_== 19) _ztest_id_= 0; }
		private float _flt { get { return (float)Pbs.SetDoubleBits(_ztest_val_); } set { _ztest_val_ = Pbs.GetDoubleBits(value); } }
		public bool HasFlt { get { return _ztest_id_== 20; } }
		public void ClearFlt() { if (_ztest_id_== 20) _ztest_id_= 0; }
		private DateTime _dat { get { return new DateTime(_ztest_val_); } set { _ztest_val_ = value.Ticks; } }
		public bool HasDat { get { return _ztest_id_== 21; } }
		public void ClearDat() { if (_ztest_id_== 21) _ztest_id_= 0; }
		
		#endregion
		
		#region message methods
		
		public override Message New() { return new OneOfTest(); }
		public override void Clear()
		{
			_memoized_size = 0;
			_ztest_id_ = 0;_ztest_val_= 0; _ztest_obj_ = null; 
			_name = null;
		}
		public override int GetHashCode() { return base.GetHashCode(); }
		public override bool Equals(object msg)
		{
			var test = msg as OneOfTest;
			if(test==null) return false;
			if(_name != test._name) return false;
			if (OneOfZtest != test.OneOfZtest) return false;
			switch (_ztest_id_) 
			{
				case 0: break;
				case 1: if(_str != test._str) return false; break; 
				case 2: if(!Pbs.EqualBytes(_date,test._date)) return false; break; 
				case 3: if(!_msg.Equals(test._msg)) return false; break; 
				case 10: if(_i32 != test._i32) return false; break; 
				case 11: if(_bol != test._bol) return false; break; 
				case 12: if(_cha != test._cha) return false; break; 
				case 14: if(_si3 != test._si3) return false; break; 
				case 15: if(_fx3 != test._fx3) return false; break; 
				case 16: if(_ui64 != test._ui64) return false; break; 
				case 17: if(_si64 != test._si64) return false; break; 
				case 18: if(_i64 != test._i64) return false; break; 
				case 19: if(_dbl != test._dbl) return false; break; 
				case 20: if(_flt != test._flt) return false; break; 
				case 21: if(_dat != test._dat) return false; break; 
			}
			return true;
		}
		public override void Get(FieldDescriptor ds_, IDataReader dr_)
		{
			switch( ds_.Pos )
			{
				case 0: Str = dr_.AsString(); break;
				case 1: Date = dr_.AsBytes(); break;
				case 2: dr_.AsMessage(_msg??(Msg = new Any()), ds_); break;
				case 3: Name = dr_.AsString(); break;
				case 4: I32 = dr_.AsInt(); break;
				case 5: Bol = dr_.AsBool(); break;
				case 6: Cha = dr_.AsChar(); break;
				case 7: Si3 = dr_.AsSi32(); break;
				case 8: Fx3 = (uint)dr_.AsBit32(); break;
				case 9: Ui64 = (ulong)dr_.AsLong(); break;
				case 10: Si64 = dr_.AsSi64(); break;
				case 11: I64 = dr_.AsLong(); break;
				case 12: Dbl = dr_.AsDouble(); break;
				case 13: Flt = dr_.AsFloat(); break;
				case 14: Dat = dr_.AsDate(); break;
			}
		}
		public override int GetSerializedSize()
		{
			int _gss_= 0;
			if(HasName) _gss_+= 1 + Pbs.str(_name);
			switch (_ztest_id_) 
			{
				case 0: break;
				case 1: _gss_+= 1 + Pbs.str(_str); break; 
				case 2: _gss_+= 1 + Pbs.bts(_date); break; 
				case 3: _gss_+= 1 + Pbs.msg(_msg); break; 
				case 10: _gss_+= 1 + Pbs.i32(_i32); break; 
				case 11: _gss_+= 2; break; 
				case 12: _gss_+= 1 + Pbs.chr(_cha); break; 
				case 14: _gss_+= 1 + Pbs.si32(_si3); break; 
				case 15: _gss_+= 5; break; 
				case 16: _gss_+= 2 + Pbs.i64((long)_ui64); break; 
				case 17: _gss_+= 2 + Pbs.si64(_si64); break; 
				case 18: _gss_+= 2 + Pbs.i64(_i64); break; 
				case 19: _gss_+= 10; break; 
				case 20: _gss_+= 6; break; 
				case 21: _gss_+= 2 + Pbs.dat(_dat); break; 
			}
			return _memoized_size = _gss_;
		}
		public override void Put(IDataWriter wr_)
		{
			var fs_ = Descriptor.Fields;
			if(HasName) wr_.AsString(fs_[3], _name);
			switch (_ztest_id_) 
			{
				case 0: break;
				case 1: wr_.AsString(fs_[0], _str); break; 
				case 2: wr_.AsBytes(fs_[1], _date); break; 
				case 3: wr_.AsMessage(fs_[2], _msg); break; 
				case 10: wr_.AsInt(fs_[4], _i32); break; 
				case 11: wr_.AsBool(fs_[5], _bol); break; 
				case 12: wr_.AsChar(fs_[6], _cha); break; 
				case 14: wr_.AsSi32(fs_[7], _si3); break; 
				case 15: wr_.AsBit32(fs_[8], (int)_fx3); break; 
				case 16: wr_.AsLong(fs_[9], (long)_ui64); break; 
				case 17: wr_.AsSi64(fs_[10], _si64); break; 
				case 18: wr_.AsLong(fs_[11], _i64); break; 
				case 19: wr_.AsDouble(fs_[12], _dbl); break; 
				case 20: wr_.AsFloat(fs_[13], _flt); break; 
				case 21: wr_.AsDate(fs_[14], _dat); break; 
			}
		}
		
		#endregion
	}
}